version: '3.7'

# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2022-06-25T15-50-16Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4

  postgres:
    image: debezium/postgres:12
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=start_data_engineer
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=start_data_engineer

  zookeeper:
    image: debezium/zookeeper:1.1
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    depends_on:
      - postgres

  kafka:
    image: debezium/kafka:1.1
    ports:
      - 9092:9092
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
  
  connect:
      image: debezium/connect:1.1
      build:
        args:
          DEBEZIUM_VERSION: 1.1
      ports:
        - 8083:8083
        - 5005:5005
      environment:
        - BOOTSTRAP_SERVERS=kafka:9092
        - GROUP_ID=sde_group
        - CONFIG_STORAGE_TOPIC=sde_storage_topic
        - OFFSET_STORAGE_TOPIC=sde_offset_topic
      depends_on:
        - kafka

  app:
    build: .
    environment:
      WAIT_HOSTS: postgres:5432, kafka:9092, zookeeper:2181, connect:8083
      WAIT_AFTER: 15
    command: >
      sh -c "/wait && ./curl.sh && 
            python test.py wait_for_connect"
    restart: always


## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.

volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2: